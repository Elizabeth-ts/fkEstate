{
  "_args": [
    [
      "node-wkhtml",
      "/Users/fw/Documents/prosky/yoouda"
    ]
  ],
  "_defaultsLoaded": true,
  "_engineSupported": true,
  "_from": "node-wkhtml@*",
  "_id": "node-wkhtml@0.0.3",
  "_inCache": true,
  "_location": "/node-wkhtml",
  "_nodeVersion": "v0.4.10",
  "_npmJsonOpts": {
    "contributors": false,
    "file": "/Users/michaelhemesath/.npm/node-wkhtml/0.0.3/package/package.json",
    "serverjs": false,
    "wscript": false
  },
  "_npmVersion": "1.0.18",
  "_phantomChildren": {},
  "_requested": {
    "name": "node-wkhtml",
    "raw": "node-wkhtml",
    "rawSpec": "",
    "scope": null,
    "spec": "*",
    "type": "range"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/node-wkhtml/-/node-wkhtml-0.0.3.tgz",
  "_shasum": "a52337b5a6e3ed2593ee18a4440cdaeaec72441d",
  "_shrinkwrap": null,
  "_spec": "node-wkhtml",
  "_where": "/Users/fw/Documents/prosky/yoouda",
  "author": {
    "email": "mike.hemesath@gmail.com",
    "name": "Mike Hemesath"
  },
  "dependencies": {},
  "description": "Wrapper for the khtmltopdf and khtmltoimg project.",
  "devDependencies": {
    "expresso": "0.7.9",
    "should": "0.2.1"
  },
  "directories": {},
  "dist": {
    "shasum": "a52337b5a6e3ed2593ee18a4440cdaeaec72441d",
    "tarball": "http://registry.npmjs.org/node-wkhtml/-/node-wkhtml-0.0.3.tgz"
  },
  "engines": {
    "node": ">= 0.4.0"
  },
  "installable": true,
  "keywords": [
    "converter",
    "html",
    "img",
    "node",
    "pdf",
    "webkit",
    "wkhtml"
  ],
  "main": "index",
  "maintainers": [
    {
      "name": "mike.hemesath",
      "email": "mike.hemesath@gmail.com"
    }
  ],
  "name": "node-wkhtml",
  "optionalDependencies": {},
  "readme": "# node-wkhtml\n\nWrapper for the **wkhtmltopdf** and **wkhtmltoimage** shell utilities. Converts html to pdf or image format using the webkit rendering engine, and qt.\n\nSee: https://github.com/antialize/wkhtmltopdf\n\n## Example\n\n    // Generate PDF constructor with global options for internal links disabled\n    var PDF = require(\"node-wkhtml\").pdf({ disable-internal-link: true });\n\n    // Creates a PDF file of the Express guide.\n    new PDF({url: \"http://expressjs.com/guide.html\"}).convertAs(\"expressGuide.pdf\");\n\n## wkhtmltopdf & wkhtmltoimage Installation\n\nDownload the appropriate utility from http://code.google.com/p/wkhtmltopdf/downloads/list. Compilation instructions can be found here: http://madalgo.au.dk/~jakobt/wkhtmltoxdoc/wkhtmltopdf_0.10.0_rc2-doc.html\n\n**The pdf and image features are in separate utilities**. You will need to download the utility for the feature(s) you plan on using.\n\n## node-khtml Installation\n\n    npm install node-wkhtml\n    \n## PDF Usage\n\nCreate a PDF constructor with default global options. See http://madalgo.au.dk/~jakobt/wkhtmltoxdoc/wkhtmltopdf_0.10.0_rc2-doc.html for option documentation.\n    \n    // All PDFs created with this constructor will by default have 10mm margins\n    var PDF = require(\"node-wkhtml\").pdf({ \n      'margin-top': 10, \n      'margin-bottom': 10, \n      'margin-left': 10, \n      'margin-right': 10' \n    });\n    \nTo create a PDF object,  invoke the generated constructor.\n\n    var PDF = require(\"node-wkhtml\").pdf();\n\n    // Generate PDF from URL\n    var urlPDF = new PDF({ url: \"www.google.com\" });\n\n    // Generate PDF from file\n    var filePDF = new PDF({ file: \"foo.html\" });\n \n    // Generate PDF from HTML\n    var htmlPDF = new PDF({ html: \"<h1>Hello World</h1>\" });\n\nPDFs can be output to files, or through stdout.\n\n    // file\n    new PDF({url: \"www.google.com\"}).convertAs(\"google.pdf\", function(err, stdout) {\n      console.log(\"PDF Complete!\")\n    });\n    \n    // stdout\n    new PDF({url: \"www.google.com\"}).convert(function(err, stdout) {\n      console.log(stdout); // outputs contents of the PDF.\n    });\n\n\nSee http://madalgo.au.dk/~jakobt/wkhtmltoxdoc/wkhtmltopdf_0.10.0_rc2-doc.html.\n\n## Image Usage\n\nCreate an image constructor with default global options. See http://madalgo.au.dk/~jakobt/wkhtmltoxdoc/wkhtmltoimage_0.10.0_rc2-doc.html for option documenation.\n\n    // All images created with this constructor will by default be 900px wide\n    var Image = require(\"node-wkhtml\").image({ width: 900 });\n    \n    // Generate image from URL\n    var urlImage = new Image({ url: \"www.google.com\" });\n    \n    // Generate image from file\n    var fileImage = new Image({ file: \"foo.html\" });\n    \n    // Generate PDF from HTML\n    var htmlImage = new Image({ html: \"<h1>Hello World</h1>\" });\n    \nLike PDFs, images can be output to files, or through stdout.\n\n    // file\n    new Image({url: \"www.google.com\"}).convertAs(\"google.png\", function(err, stdout) {\n      console.log(\"Image Complete!\");\n    });\n\n    // stdout\n    new Image({url: \"www.google.com\"}).convert(function(err, stdout) {\n      console.log(stdout); // outputs contents of the png.\n    });",
  "readmeFilename": "Readme.md",
  "scripts": {},
  "version": "0.0.3"
}
